Here is an explanation of the core features of the AgriVision AI application:

### 1. Crop Yield Prediction

This feature uses a Genkit AI flow to predict crop yield based on user-provided data.

*   **User Input:** On the "Crop Yield Prediction" page (`src/app/crop-yield/page.tsx`), the user fills out a detailed form with information like crop type, soil type, temperature, rainfall, and farm size.
*   **AI Flow Execution:** When the form is submitted, it calls the `predictCropYield` function, which triggers a Genkit flow defined in `src/ai/flows/crop-yield-prediction.ts`.
*   **Structured Prompting:** This flow packages the user's input into a structured prompt that instructs the Gemini AI model to act as an agricultural scientist. The prompt asks the model to analyze the data and return a detailed prediction.
*   **AI-Generated Output:** The model processes the input and returns a structured JSON object containing the predicted yield, a confidence score, a conversational analysis of the factors influencing the yield, and actionable suggestions for improvement.
*   **Displaying Results:** The frontend component receives this JSON object and dynamically renders the information in an easy-to-read report card, breaking down the analysis, suggestions, and contingency plans for the farmer.

### 2. AI Farmer Assistant

This feature provides a 24/7 conversational AI expert for farming-related questions.

*   **User Interaction:** In the "AI Farmer" page (`src/app/ai-farmer/page.tsx`), the user can type or speak a question into the chat interface.
*   **Context-Aware Advice:** The component captures the user's location (if provided) and sends it along with the query to the `getFarmingAdvice` AI flow.
*   **Tool-Augmented AI:** Inside the flow (`src/ai/flows/ai-farmer-assistant.ts`), Genkit first uses a **Tool** called `getWeatherForLocation` to fetch real-time weather data for the user's area.
*   **Enriched Prompt:** The user's question and the live weather data are then combined into a sophisticated prompt. The prompt instructs the AI to act as a farming expert and to use the weather data to provide context-aware advice (e.g., "Don't spray pesticides, as rain is expected").
*   **Text-to-Speech (TTS):** After the AI generates the text advice, the flow calls another AI model (`gemini-2.5-flash-preview-tts`) to convert that text into natural-sounding speech.
*   **Display and Playback:** The frontend receives both the text advice and the audio data. It displays the text with a typing effect and provides a button to play the audio response, making the information accessible to users with varying literacy levels.

### 3. Crop Disease Classification

This feature uses image recognition to identify diseases in crops.

*   **Image Upload:** On the "Disease Classification" page (`src/app/disease-classification/page.tsx`), the user uploads a clear image of a crop leaf. The image is converted into a Base64 data URI.
*   **Multi-modal AI Flow:** The data URI is sent to the `classifyCropDisease` AI flow (`src/ai/flows/crop-disease-classification.ts`).
*   **Vision-Enabled Prompt:** The flow uses a prompt that includes the image (`{{media url=photoDataUri}}`). This instructs a multi-modal Gemini model to visually analyze the image. The prompt asks the AI to identify the disease (or confirm if it's healthy), provide a confidence level, describe the disease, and list actionable recommendations for treatment.
*   **Structured Report:** The AI returns a JSON object with the diagnosis, confidence score, and recommendations. The frontend then displays this information in a detailed, easy-to-understand report card.

### 4. Animal Classification

Similar to disease classification, this feature identifies animal species from an image.

*   **Image Upload:** The user uploads an animal photo on the "Animal Classification" page (`src/app/animal-classification/page.tsx`).
*   **Specialized AI Prompt:** The image data is sent to the `animalClassification` flow (`src/ai/flows/animal-classification.ts`). The prompt is specifically engineered to make the AI act as an expert in Indian livestock breeds.
*   **Detailed Analysis:** It instructs the model to identify the species, provide a confidence score, and if it's a recognized cattle breed (like Gir or Sahiwal), to provide detailed `breedInfo` including local names, origin, weight, and a farmer-friendly description of milk yield (e.g., "8-10 liters per day").
*   **Actionable Suggestion:** The prompt also requires the AI to give a practical, actionable suggestion based on the animal's breed and its appearance in the photo. This information is then displayed on a comprehensive report card.
